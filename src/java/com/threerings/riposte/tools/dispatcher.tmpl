package $package;

import com.threerings.util.MethodProfiler;

#foreach ($import in $imports)
import $import;
#end

/**
 * Provides the implementation of {@link PostDispatcher} for the the
 * {@link ${name}Service}.  When a request comes to the server for this service, this
 * class is responsible for calling the correct service methods with the correct arguments and
 * for getting the result back to the user
 */
public class ${name}Dispatcher
    implements PostDispatcher
{
    @Inject
    public ${name}Dispatcher (${name}Service service, MethodProfiler profiler)
    {
        _service = service;
        _profiler = profiler;
    }

    @Override // documentation inherited
    public Object dispatchRequest (int methodId, Object[] args)
        throws Exception
    {
        switch (methodId) {
#foreach ($m in $methods)
        case ${m.code}:
            if (_profiler != null) {
                _profiler.enter("${name}Service.${m.method.name}");
            }
            try {
#if ($m.containsGenericParameters())#foreach ($cast in $m.getGenericCasts())
                @SuppressWarnings("unchecked") $cast
#end#end
                #if (!$m.returnsVoid())return #{end}_service.${m.method.name}(
                    $m.getUnwrappedArgList(true)
                );
#if ($m.returnsVoid())                return null;
#end            } finally {
                if (_profiler != null) {
                    _profiler.exit("${name}Service.${m.method.name}");
                }
            }

#end
        default:
            throw new PostException(PostCodes.METHOD_NOT_FOUND, "" + methodId);
        }
    }

    @Override // documentation inherited
    public String getMethodName (int methodId)
    {
        switch (methodId) {
#foreach ($m in $methods)
        case ${m.code}: return "${name}Dispatcher::${m.method.name}";
#end
        default: return "${name}Dispatcher [Unknown method id " + methodId + "]";
        }
    }

#foreach ($m in $methods)
    protected static final int ${m.code} = ${velocityCount};
#end

    protected ${name}Service _service;
    protected MethodProfiler _profiler;
}
