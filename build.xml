<?xml version="1.0"?>
<project name="riposte" basedir="." default="compile">
  <property name="lib.name" value="riposte"/>
  <property name="src.dir.java" value="src/java"/>
  <property name="javadoc.dir" value="docs/javadoc"/>
  <property name="doc.overview" value="docs/overview.html"/>
  <property name="copyright.holder" value="Nathan Curtis"/>
  <property name="deploy.dir" value="dist"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>
  <property name="libs.dir" value="lib"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <!-- our dependencies are in a separate file so that we can integrate into OOO builds -->
  <import file="etc/libs-incl.xml"/>

  <!-- we read our flexsdk.dir from build.properties when building standalone -->
  <property file="etc/build.properties"/>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir.java}" includes="**/*.tmpl"/>
      <fileset dir="${src.dir.java}" includes="**/*.properties"/>
    </copy>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <fileset refid="${lib.name}.libs"/>
    </copy>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean" description="Cleans out build results.">
    <delete dir="${classes.dir}"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean" description="Completely removes build result directory.">
    <delete dir="${deploy.dir}"/>
  </target>

  <target name="javadoc" depends="prepare" description="Generates the javadoc documentation">
    <javadoc windowtitle="${lib.name} API" doctitle="${lib.name} API"
             overview="${doc.overview}" destdir="${javadoc.dir}">
      <packageset dir="${src.dir.java}"/>
      <bottom>Copyright &#169; 2009 ${copyright.holder}.  All Rights Reserved.</bottom>
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <link href="http://samskivert.com/code/samskivert/docs/"/>
      <link href="http://www.threerings.net/code/narya/docs/api/"/>
      <link href="http://google-collections.googlecode.com/svn/trunk/javadoc/"/>
      <link href="http://google-guice.googlecode.com/svn/trunk/javadoc/"/>
      <link href="http://java.sun.com/products/servlet/2.5/docs/servlet-2_5-mr2/"/>
    </javadoc>
  </target>

  <target name="compile" depends="prepare" description="Compiles the code.">
    <javac srcdir="${src.dir.java}" destdir="${classes.dir}" includeAntRuntime="false">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- checks whether our Flash library needs building -->
  <target name="checkaslib">
    <condition property="no_build_aslib"><or>
      <not><available file="${flexsdk.dir}/lib/compc.jar"/></not>
      <and>
        <uptodate targetfile="${deploy.dir}/${lib.name}lib.swc">
          <srcfiles dir="src/as" includes="**/*.as"/>
        </uptodate>
      </and>
    </or></condition>
  </target>

  <!-- builds our Flash library -->
  <target name="aslib" unless="no_build_aslib" depends="checkaslib,prepare">
    <!-- Generate aslib-config.xml for Flash Player and general compilation -->
    <copy file="etc/aslib-config.xml.in" tofile="${deploy.dir}/aslib-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
      </filterset>
    </copy>
    <!-- Build Narya -->
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=src/as/"/>
      <arg value="-include-sources=src/as/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${lib.name}lib.swc"/>
    </java>
    <delete file="${deploy.dir}/aslib-config.xml"/>
  </target>

  <target name="dist" depends="prepare,compile,aslib"
          description="Compiles the code and builds our jar file.">
    <jar destfile="${deploy.dir}/${lib.name}.jar" basedir="${classes.dir}"/>
      <fileset dir="${classes.dir}">
        <exclude name="com/threerings/riposte/tools/**"/>
        <exclude name="com/threerings/riposte/tools.properties"/>
      </fileset>
    <jar destfile="${deploy.dir}/${lib.name}-tools.jar" basedir="${classes.dir}">
      <fileset dir="${classes.dir}"/>
      <zipfileset src="${deploy.dir}/lib/samskivert.jar"/>
      <zipfileset src="${deploy.dir}/lib/velocity-1.5-dev.jar"/>
      <zipfileset src="${deploy.dir}/lib/narya-tools.jar"/>
    </jar>
  </target>
</project>
